From: Mike Hommey <mh@glandium.org>
Date: Mon, 5 Aug 2013 17:04:10 +0900
Subject: Bug 901414 - Fix ipc/chromium to build for GNU/kFreeBSD

---
 ipc/chromium/Makefile.in                       |  7 ++++++-
 ipc/chromium/chromium-config.mk                |  2 +-
 ipc/chromium/src/base/dir_reader_posix.h       |  8 ++++----
 ipc/chromium/src/base/platform_thread.h        |  2 +-
 ipc/chromium/src/base/platform_thread_posix.cc | 23 ++++++++++-------------
 ipc/chromium/src/base/process_util.h           |  8 ++++----
 ipc/chromium/src/build/build_config.h          |  4 ++--
 7 files changed, 28 insertions(+), 26 deletions(-)

diff --git a/ipc/chromium/Makefile.in b/ipc/chromium/Makefile.in
index 97ea7e6..be752c8 100644
--- a/ipc/chromium/Makefile.in
+++ b/ipc/chromium/Makefile.in
@@ -244,10 +244,15 @@ ifdef OS_BSD # {
 
 CPPSRCS += \
   atomicops_internals_x86_gcc.cc \
-  process_util_bsd.cc \
   time_posix.cc \
   $(NULL)
 
+ifeq ($(OS_ARCH),GNU_kFreeBSD)
+CPPSRCS += process_util_linux.cc
+else
+CPPSRCS += process_util_bsd.cc
+endif
+
 ifdef MOZ_ENABLE_GTK2
 CPPSRCS += \
   message_pump_glib.cc \
diff --git a/ipc/chromium/chromium-config.mk b/ipc/chromium/chromium-config.mk
index 1a69116..57f3265 100644
--- a/ipc/chromium/chromium-config.mk
+++ b/ipc/chromium/chromium-config.mk
@@ -72,7 +72,7 @@ DEFINES += \
   $(NULL)
 
 else # } {
-ifeq ($(OS_ARCH),FreeBSD) # {
+ifneq (,$(filter $(OS_ARCH),FreeBSD GNU_kFreeBSD)) # {
 
 OS_FREEBSD = 1
 OS_BSD = 1
diff --git a/ipc/chromium/src/base/dir_reader_posix.h b/ipc/chromium/src/base/dir_reader_posix.h
index a37075a..524d63a 100644
--- a/ipc/chromium/src/base/dir_reader_posix.h
+++ b/ipc/chromium/src/base/dir_reader_posix.h
@@ -18,9 +18,9 @@
 // seems worse than falling back to enumerating all file descriptors so we will
 // probably never implement this on the Mac.
 
-#if defined(OS_LINUX) && defined(__linux__)
+#if defined(OS_LINUX)
 #include "base/dir_reader_linux.h"
-#elif defined(OS_BSD)
+#elif defined(OS_BSD) && !defined(__GLIBC__)
 #include "base/dir_reader_bsd.h"
 #else
 #include "base/dir_reader_fallback.h"
@@ -28,9 +28,9 @@
 
 namespace base {
 
-#if defined(OS_LINUX) && defined(__linux__)
+#if defined(OS_LINUX)
 typedef DirReaderLinux DirReaderPosix;
-#elif defined(OS_BSD)
+#elif defined(OS_BSD) && !defined(__GLIBC__)
 typedef DirReaderBSD DirReaderPosix;
 #else
 typedef DirReaderFallback DirReaderPosix;
diff --git a/ipc/chromium/src/base/platform_thread.h b/ipc/chromium/src/base/platform_thread.h
index 342f55a..ed09afd 100644
--- a/ipc/chromium/src/base/platform_thread.h
+++ b/ipc/chromium/src/base/platform_thread.h
@@ -22,7 +22,7 @@ typedef void* PlatformThreadHandle;  // HANDLE
 #elif defined(OS_POSIX)
 #include <pthread.h>
 typedef pthread_t PlatformThreadHandle;
-#if defined(OS_LINUX) || defined(OS_OPENBSD)
+#if defined(OS_LINUX) || defined(OS_OPENBSD) || defined(__GLIBC__)
 #include <unistd.h>
 typedef pid_t PlatformThreadId;
 #elif defined(OS_BSD)
diff --git a/ipc/chromium/src/base/platform_thread_posix.cc b/ipc/chromium/src/base/platform_thread_posix.cc
index 16c6e49..e853c4f 100644
--- a/ipc/chromium/src/base/platform_thread_posix.cc
+++ b/ipc/chromium/src/base/platform_thread_posix.cc
@@ -14,7 +14,7 @@
 #elif defined(OS_LINUX)
 #include <sys/syscall.h>
 #include <sys/prctl.h>
-#elif defined(OS_FREEBSD)
+#elif defined(OS_FREEBSD) && !defined(__GLIBC__)
 #include <sys/param.h>
 #include <sys/thr.h>
 #endif
@@ -23,7 +23,7 @@
 #include <unistd.h>
 #endif
 
-#if defined(OS_BSD) && !defined(OS_NETBSD)
+#if defined(OS_BSD) && !defined(OS_NETBSD) && !defined(__GLIBC__)
 #include <pthread_np.h>
 #endif
 
@@ -48,6 +48,10 @@ PlatformThreadId PlatformThread::CurrentId() {
   mach_port_t port = mach_thread_self();
   mach_port_deallocate(mach_task_self(), port);
   return port;
+#elif defined(OS_LINUX)
+  return syscall(__NR_gettid);
+#elif defined(OS_OPENBSD) || defined(__GLIBC__)
+  return (intptr_t) (pthread_self());
 #elif defined(OS_NETBSD)
   return _lwp_self();
 #elif defined(OS_DRAGONFLY)
@@ -60,14 +64,6 @@ PlatformThreadId PlatformThread::CurrentId() {
     thr_self(&lwpid);
     return lwpid;
 #  endif
-#elif defined(OS_OPENBSD)
-  return (intptr_t) (pthread_self());
-#elif defined(OS_LINUX)
-#ifdef __NR_gettid
-  return syscall(__NR_gettid);
-#else
-  return getpid();
-#endif
 #endif
 }
 
@@ -108,12 +104,13 @@ void PlatformThread::SetName(const char* name) {
   // Note that glibc also has a 'pthread_setname_np' api, but it may not be
   // available everywhere and it's only benefit over using prctl directly is
   // that it can set the name of threads other than the current thread.
-#if defined(OS_BSD) && !defined(OS_NETBSD)
-  pthread_set_name_np(pthread_self(), name);
+#if defined(OS_LINUX)
+  prctl(PR_SET_NAME, reinterpret_cast<uintptr_t>(name), 0, 0, 0); 
 #elif defined(OS_NETBSD)
   pthread_setname_np(pthread_self(), "%s", (void *)name);
+#elif defined(OS_BSD) && !defined(__GLIBC__)
+  pthread_set_name_np(pthread_self(), name);
 #else
-  prctl(PR_SET_NAME, reinterpret_cast<uintptr_t>(name), 0, 0, 0); 
 #endif
 }
 #endif // !OS_MACOSX
diff --git a/ipc/chromium/src/base/process_util.h b/ipc/chromium/src/base/process_util.h
index d372498..efc4008 100644
--- a/ipc/chromium/src/base/process_util.h
+++ b/ipc/chromium/src/base/process_util.h
@@ -13,7 +13,7 @@
 #if defined(OS_WIN)
 #include <windows.h>
 #include <tlhelp32.h>
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(__GLIBC__)
 #include <dirent.h>
 #include <limits.h>
 #include <sys/types.h>
@@ -298,7 +298,7 @@ class NamedProcessIterator {
   const ProcessEntry* NextProcessEntry();
 
  private:
-#if !defined(OS_BSD)
+#if !defined(OS_BSD) || defined(__GLIBC__)
   // Determines whether there's another process (regardless of executable)
   // left in the list of all processes.  Returns true and sets entry_ to
   // that process's info if there is one, false otherwise.
@@ -316,7 +316,7 @@ class NamedProcessIterator {
 #if defined(OS_WIN)
   HANDLE snapshot_;
   bool started_iteration_;
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(__GLIBC__)
   DIR *procfs_dir_;
 #elif defined(OS_BSD)
   std::vector<ProcessEntry> content;
@@ -325,7 +325,7 @@ class NamedProcessIterator {
   std::vector<kinfo_proc> kinfo_procs_;
   size_t index_of_kinfo_proc_;
 #endif
-#if !defined(OS_BSD)
+#if !defined(OS_BSD) || defined(__GLIBC__)
   ProcessEntry entry_;
   const ProcessFilter* filter_;
 #endif
diff --git a/ipc/chromium/src/build/build_config.h b/ipc/chromium/src/build/build_config.h
index 74e2d03..6fe534a 100644
--- a/ipc/chromium/src/build/build_config.h
+++ b/ipc/chromium/src/build/build_config.h
@@ -17,11 +17,11 @@
 // A set of macros to use for platform detection.
 #if defined(__APPLE__)
 #define OS_MACOSX 1
-#elif defined(__linux__) || defined(ANDROID) || defined(__GLIBC__) || defined(__GNU__)
+#elif defined(__linux__) || defined(ANDROID) || defined(__GNU__)
 #define OS_LINUX 1
 #elif defined(__DragonFly__)
 #define OS_DRAGONFLY 1
-#elif defined(__FreeBSD__)
+#elif defined(__FreeBSD__) || defined(__FreeBSD_kernel__)
 #define OS_FREEBSD 1
 #elif defined(__NetBSD__)
 #define OS_NETBSD 1
